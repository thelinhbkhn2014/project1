/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.thelinh.gui;

import com.thelinh.model.Exam;
import com.thelinh.model.Question;
import com.thelinh.model.QuestionSql;
import com.thelinh.model.Subject;
import com.thelinh.model.SubjectSql;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hoangkien
 */
public class ManualExam extends javax.swing.JFrame {

    private ArrayList<Subject> subjectList;
    private int countQuestion = 0;
    private ArrayList<Question> currentQuestionList;
    private Subject subject;
    private int examId;
    private String examCode;
    private int time;
    private ManageExam parent; // For edit only
    
    /**
     * Creates new form ManualExam
     */
    public ManualExam() {
        examCode = "";
        examId = 0;
        time = 0;
        initComponents();
        subjectList = SubjectSql.getAllSubject();
        for (Subject sub : subjectList) {
            this.cbSubject.addItem(sub.getSubjectId().trim()
                    + " - " + sub.getSubjectName());
        }
    }

    public void setEditExam(ManageExam parent, Exam exam) {
        this.parent = parent;
        ArrayList<Question> questionList = exam.getQuestionList();
        this.btnCancel.setEnabled(true);
        this.btnAdd.setEnabled(true);
        this.btnPreview.setEnabled(true);
        this.btnSubjectChoice.setEnabled(false);
        this.btnRemove.setEnabled(true);

        this.examCode = exam.getExamCode();
        this.subject = exam.getSubject();
        this.time = exam.getTime();
        this.cbSubject.addItem(subject.getSubjectName().trim());
        this.currentQuestionList = QuestionSql.getAllQuestionBySubjectId(subject.getSubjectId());
        this.btnSubjectChoice.setEnabled(false);
        this.examId = exam.getExamId();
        this.countQuestion = questionList.size();
        this.lbCount.setText(String.valueOf(countQuestion));
        DefaultTableModel model = (DefaultTableModel) tbChooseQuestion.getModel();
        for (Question q : questionList) {
            model.addRow(new Object[]{
                q.getQuestionId(), q.getQuestion(), q.getChapter(), q.getLevels()
            });
        }
        model = (DefaultTableModel) tbQuestion.getModel();
        for (Question q : currentQuestionList) {
            boolean choosen = false;
            for (Question p : questionList) {
                if (q.getQuestionId().trim().equals(p.getQuestionId().trim())) {
                    choosen = true;
                    break;
                }
            }
            if (!choosen) {
                model.addRow(new Object[]{
                    q.getQuestionId(), q.getQuestion(), q.getChapter(), q.getLevels()
                });
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnSubjectChoice = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbSubject = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbQuestion = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbChooseQuestion = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnPreview = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lbCount = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Soạn đề thi");

        btnSubjectChoice.setText("Chọn");
        btnSubjectChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubjectChoiceActionPerformed(evt);
            }
        });

        btnCancel.setText("Hủy");
        btnCancel.setEnabled(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel1.setText("Môn");

        cbSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSubjectActionPerformed(evt);
            }
        });

        tbQuestion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Câu hỏi", "Câu hỏi", "Chương", "Độ khó"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbQuestion);

        btnAdd.setText("Thêm");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tbChooseQuestion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Câu hỏi", "Câu hỏi", "Chương", "Độ khó"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tbChooseQuestion);

        jButton1.setText("Đóng");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnPreview.setText("Xem trước");
        btnPreview.setEnabled(false);
        btnPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewActionPerformed(evt);
            }
        });

        jLabel2.setText("Số câu hỏi: ");

        lbCount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbCount.setText("0");

        btnRemove.setText("Loại bỏ");
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane3)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSubject, 0, 457, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSubjectChoice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbCount, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdd))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnPreview)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSubjectChoice)
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(jLabel2)
                    .addComponent(lbCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnPreview))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubjectChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubjectChoiceActionPerformed
        this.cbSubject.setEnabled(false);
        this.btnCancel.setEnabled(true);
        this.btnAdd.setEnabled(true);
        this.btnPreview.setEnabled(true);
        this.btnSubjectChoice.setEnabled(false);
        this.btnRemove.setEnabled(true);
        this.currentQuestionList = QuestionSql.
                getAllQuestionBySubjectId(this.subjectList.get(
                        this.cbSubject.getSelectedIndex()).getSubjectId());
        DefaultTableModel model = (DefaultTableModel) this.tbQuestion.getModel();
        for (Question q : currentQuestionList) {
            model.addRow(new Object[]{
                q.getQuestionId(), q.getQuestion(), q.getChapter(), q.getLevels()
            });
        }
    }//GEN-LAST:event_btnSubjectChoiceActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.cbSubject.setEnabled(true);
        this.btnCancel.setEnabled(false);
        this.btnAdd.setEnabled(false);
        this.btnPreview.setEnabled(false);
        this.btnSubjectChoice.setEnabled(true);
        this.btnRemove.setEnabled(false);
        DefaultTableModel dm = (DefaultTableModel) this.tbQuestion.getModel();
        int rowCount = dm.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
        dm = (DefaultTableModel) this.tbChooseQuestion.getModel();
        rowCount = dm.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void cbSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSubjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbSubjectActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int selectedRow = this.tbQuestion.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "You must choose one question");
        } else {
            this.countQuestion++;
            this.lbCount.setText(String.valueOf(this.countQuestion));
            DefaultTableModel questionModel = (DefaultTableModel) this.tbQuestion.getModel();
            DefaultTableModel chooseModel = (DefaultTableModel) this.tbChooseQuestion.getModel();

            chooseModel.addRow(new Object[]{
                tbQuestion.getValueAt(selectedRow, 0),
                tbQuestion.getValueAt(selectedRow, 1),
                tbQuestion.getValueAt(selectedRow, 2),
                tbQuestion.getValueAt(selectedRow, 3)});
            questionModel.removeRow(selectedRow);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selectedRow = this.tbChooseQuestion.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "You must choose one question");
        } else {
            this.countQuestion--;
            this.lbCount.setText(String.valueOf(this.countQuestion));
            DefaultTableModel questionModel = (DefaultTableModel) this.tbQuestion.getModel();
            DefaultTableModel chooseModel = (DefaultTableModel) this.tbChooseQuestion.getModel();

            questionModel.addRow(new Object[]{
                tbChooseQuestion.getValueAt(selectedRow, 0),
                tbChooseQuestion.getValueAt(selectedRow, 1),
                tbChooseQuestion.getValueAt(selectedRow, 2),
                tbChooseQuestion.getValueAt(selectedRow, 3)});
            chooseModel.removeRow(selectedRow);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed
        ArrayList<Question> questionList = new ArrayList<>();
        int rowCount = this.tbChooseQuestion.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            for (Question q : this.currentQuestionList) {
                if (((String) this.tbChooseQuestion.getValueAt(i, 0)).trim().equals(q.getQuestionId().trim())) {
                    questionList.add(q);
                    break;
                }
            }
        }
        Collections.shuffle(questionList);
        PreviewExam preExam = new PreviewExam(this, true);
        preExam.setQuestionList(questionList);
        preExam.setSubject(this.subjectList.get(
                this.cbSubject.getSelectedIndex()));
        preExam.setExamId(examId);
        preExam.setExamCode(examCode);
        preExam.setTime(time);
        preExam.setSuperParent(parent);
        preExam.setVisible(true);
    }//GEN-LAST:event_btnPreviewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManualExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManualExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManualExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManualExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManualExam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPreview;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSubjectChoice;
    private javax.swing.JComboBox<String> cbSubject;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lbCount;
    private javax.swing.JTable tbChooseQuestion;
    private javax.swing.JTable tbQuestion;
    // End of variables declaration//GEN-END:variables
}
